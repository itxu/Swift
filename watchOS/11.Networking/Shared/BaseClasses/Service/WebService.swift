
import Foundation

enum WebServiceError: Error {
  case badResponse
  case noResponse
  case other
}


class WebService {
  let session: URLSession
  let rootURL: URL
  
  init (rootURL:URL) {
    self.rootURL = rootURL;
    
    let configuration = URLSessionConfiguration.default
    
    session = URLSession(configuration: configuration)
  }
  
  
  // MARK: - ****** Request Helpers ******
  
  internal func requestWithURLString(_ string: String) -> URLRequest? {
    if let url = URL(string: string, relativeTo: rootURL) {
      return URLRequest(url: url)
    }
    return nil
  }

  internal func executeRequest<ResponseType: Decodable>(_ requestPath:String, completion: @escaping (_ response: ResponseType?, _ error: NSError?) -> Void) {
    print("Executing Request With Path: \(requestPath)")
    if let request = requestWithURLString(requestPath) {
      // Create the task
      let task = session.dataTask(with: request) { data, response, error in
        
        if error != nil {
          completion(nil, error as NSError?)
          return
        }
        
        // Check to see if there was an HTTP Error
        let cleanResponse = self.checkResponseForErrors(response)
        if let errorCode = cleanResponse.errorCode {
          print("An error occurred: \(errorCode)")
          completion(nil, error as NSError?)
          return
        }

        // Decode the response
        let decoder = JSONDecoder()
        guard let data = data else {
          print("No response data")
          completion(nil, error as NSError?)
          return
        }

        let response: ResponseType
        do {
          response = try decoder.decode(ResponseType.self, from: data)
        } catch (let error) {
          print("Parsing Issues")
          completion(nil, error as NSError?)
          return
        }

        // Things went well, call the completion handler
        completion(response, nil)
      }
      task.resume()
      
    } else {
      // It was a bad URL, so just fire an error
      let error = NSError(domain:NSURLErrorDomain,
                          code:NSURLErrorBadURL,
                          userInfo:[ NSLocalizedDescriptionKey : "There was a problem creating the request URL:\n\(requestPath)"] )
      completion(nil, error)
    }
  }

  // MARK: - ****** Response Helpers ******
  
  /**
   Takes an `NSURLResponse` object and attempts to determine if any errors occurred
   - parameter response: The `NSURLResponse` generated by the task
   - returns: Tuple (`httpResponse` - The `NSURLResponse` cast to a `NSHTTPURLResponse` and `errorCode` - An error code enum representing detecable problems.)
   */
  internal func checkResponseForErrors(_ response: URLResponse?) -> (httpResponse: HTTPURLResponse?, errorCode: WebServiceError?) {
    // Make sure there was an actual response
    guard response != nil else {
      return (nil, WebServiceError.noResponse)
    }
    
    // Convert the response to an `NSHTTPURLResponse` (You can do this because you know that you are making HTTP calls in this scenario, so the cast will work.)
    guard let httpResponse = response as? HTTPURLResponse else {
      return (nil, WebServiceError.badResponse)
    }
    
    // Check to see if the response contained and HTTP response code of something other than 200
    let statusCode = httpResponse.statusCode
    guard statusCode == 200 else {
      return (nil, WebServiceError.other)
    }
    
    return (httpResponse, nil)
  }
}
